Recorte 001, Plantilla.html
============

                        <div id="resultBlock">

                        </div>
                        <ul class="navbar-nav"
                            sec:authorize='!isAuthenticated()'>
                            <li class='nav-item'>
                                <a class='nav-menu-link nav-link'
                                   th:href='@{/login}'>
                                    <i class="fas fa-right-to-bracket"></i>
                                </a>
                            </li>
                        </ul>
                        <ul class="navbar-nav"
                            sec:authorize='isAuthenticated()'>
                            <li class='nav-item text-white my-auto'>
                                <img th:src="@{${session.imagenUsuario}}"                                      
                                     height="40" 
                                     class="rounded-circle"
                                     alt=""/>
                                <span sec:authentication='name'>Jhon</span>
                            </li>
                            <li class='nav-item text-white my-auto'>
                                <form method="post" 
                                      th:action='@{/logout}'>
                                    <button class='btn btn-dark'>
                                        <i class="fas fa-right-from-bracket"></i> 
                                    </button>
                                </form>
                            </li>
                        </ul>




Recorte 002, UsuarioDetailsServiceImpl.java
============

package com.tienda.service.impl;

import com.tienda.dao.UsuarioDao;
import com.tienda.domain.Rol;
import com.tienda.domain.Usuario;
import com.tienda.service.UsuarioDetailsService;
import jakarta.servlet.http.HttpSession;
import java.util.ArrayList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service("userDetailsService")
public class UsuarioDetailsServiceImpl
        implements UsuarioDetailsService, UserDetailsService {

    @Autowired
    private UsuarioDao usuarioDao;
    @Autowired
    private HttpSession session;
    
    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String username) 
            throws UsernameNotFoundException {
        
        //Se busca el usuario en la tabla usuarios por medio del username
        Usuario usuario = usuarioDao.findByUsername(username);
        
        //Se valida si se encontró el usuario con el username pasado...
        if (usuario == null) {
            //El usuario NO se encontró
            throw new UsernameNotFoundException(username);
        }
        
        //Si estamos acá entonces SI se encontró el usuario...
        //Guardanos la imagen del usuario en una variable de session.
        session.removeAttribute("imagenUsuario");
        session.setAttribute("imagenUsuario", usuario.getRutaImagen());
        
        //Se deben recuperar los roles del usuario y crear un ArrayList con Roles de seguridad
        var roles = new ArrayList<GrantedAuthority>();
        
        //Se revisan los roles del usuario y se convierten en roles de seguridad
        for (Rol r: usuario.getRoles()) {
            roles.add(new SimpleGrantedAuthority("ROLE_"+r.getNombre()));
        }
        
        //Se retorna un usuario de Seguridad con roles incluídos...
        return new User(usuario.getUsername(),
                usuario.getPassword(),
                roles);
    }
}




Recorte 003, ProjectConfig.java
============

    /* Los siguiente métodos son para implementar el tema de seguridad dentro del proyecto */
    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        registry.addViewController("/").setViewName("index");
        registry.addViewController("/index").setViewName("index");
        registry.addViewController("/login").setViewName("login");
        registry.addViewController("/registro/nuevo").setViewName("/registro/nuevo");
    }

    @Autowired
    private RutaPermitService rutaPermitService;
    @Autowired
    private RutaService rutaService;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

        String[] rutasPermit = rutaPermitService.getRutaPermitsString();
        List<Ruta> rutas = rutaService.getRutas();

        http.authorizeHttpRequests((request) -> {
                    request
                            .requestMatchers(rutasPermit).permitAll();
                    for (Ruta ruta : rutas) {
                        request
                                .requestMatchers(ruta.getPatron())
                                .hasRole(ruta.getRolName());
                    }
                }
                )
                .formLogin((form) -> form
                .loginPage("/login").permitAll())
                .logout((logout) -> logout.permitAll());
        return http.build();
    }

    @Autowired
    private UserDetailsService userDetailsService;

    @Autowired
    public void configurerGlobal(AuthenticationManagerBuilder builder)
            throws Exception {
        builder.userDetailsService(userDetailsService)
                .passwordEncoder(new BCryptPasswordEncoder());
    }