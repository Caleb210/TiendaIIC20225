Recorte 001 incorporar esto en los html
===========

xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity6"


Recorte 002 elemento a utilizar en fragmentos, la sección del menu de en layout/plantilla
===========
sec:authorize="hasRole('ROLE_ADMIN') or hasRole('ROLE_VENDEDOR')"

Recorte 003 elemento a utilizar en fragmentos, la parte de fragmentos de categoria y producto
===========
sec:authorize="hasRole('ROLE_ADMIN')"

Recorte 004 Incorporar en el pom.xml
===========
<dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>2.0.1.Final</version>
        </dependency>

Recorte 005 Incorporar en el el menu en plantilla.html
===========

<div>
                        <ul class="navbar-nav" sec:authorize="!isAuthenticated()">
                            <li class="nav-item px-2">
                                <a class="nav-menu-link nav-link" th:href="@{/login}">
                                    <i class='fas fa-sign-in-alt'></i>
                                </a>
                            </li>                            
                        </ul>
                        <ul class="navbar-nav" sec:authorize="isAuthenticated()">
                            <li class="nav-item text-white my-auto">
                                <img th:src="@{${session.usuarioImagen}}" alt="your image" height="40" class="rounded-circle"/>
                                <span sec:authentication='name'>Santi</span>
                            </li>
                            <li class="nav-item my-auto">
                                <form method="post" th:action="@{/logout}">
                                    <button class="btn btn-dark">
                                        <i class="fas fa-sign-out-alt"></i>
                                    </button>
                                </form>
                            </li>                            
                        </ul>
                    </div>

Recorte 006 Rol.java
===========

package com.tienda.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.io.Serializable;

import javax.validation.constraints.NotEmpty;
import lombok.Data;

@Entity
@Data
@Table(name = "rol")
public class Rol implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long idRol;

    @NotEmpty
    private String nombre;

    @Column(name = "id_usuario")
    private Long idUsuario;
}



Recorte 007 Usuario.java
===========
package com.tienda.domain;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import java.io.Serializable;
import java.util.List;
import javax.validation.constraints.NotEmpty;
import lombok.Data;

@Entity
@Data
@Table(name="usuario")
public class Usuario implements Serializable {
    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long idUsuario;    
    @NotEmpty
    private String username;    
    @NotEmpty
    private String password;
        private String nombre;
    private String apellidos;
    private String correo;
    private String telefono;    
    private String rutaImagen;
    private boolean activo;
    
    @OneToMany
    @JoinColumn(name="id_usuario")
    private List<Rol> roles;
}


Recorte 008 UsuarioDao.java
===========
package com.tienda.dao;

import com.tienda.domain.Usuario;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UsuarioDao extends JpaRepository<Usuario, Long> {    
    Usuario findByUsername(String username);
}


Recorte 009 UsuarioDetailsService.java
===========
package com.tienda.service;

import org.springframework.security.core.userdetails.*;

public interface UsuarioDetailsService {
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
}


Recorte 010 UsuarioDetailsServiceImpl.java
===========

package com.tienda.service.impl;

import com.tienda.service.UsuarioDetailsService;
import com.tienda.dao.UsuarioDao;
import com.tienda.domain.Usuario;
import com.tienda.domain.Rol;
import jakarta.servlet.http.HttpSession;
import java.util.ArrayList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service("userDetailsService")
public class UsuarioDetailsServiceImpl implements UsuarioDetailsService, UserDetailsService {
    @Autowired
    private UsuarioDao usuarioDao;
    @Autowired
    private HttpSession session;

    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        //Busca el usuario por el username en la tabla
        Usuario usuario = usuarioDao.findByUsername(username);
        //Si no existe el usuario lanza una excepción
        if (usuario == null) {
            throw new UsernameNotFoundException(username);
        }
        session.removeAttribute("usuarioImagen");
        session.setAttribute("usuarioImagen", usuario.getRutaImagen());
        //Si está acá es porque existe el usuario... sacamos los roles que tiene
        var roles = new ArrayList<GrantedAuthority>();
        for (Rol rol : usuario.getRoles()) {   //Se sacan los roles
            roles.add(new SimpleGrantedAuthority(rol.getNombre()));
        }
        //Se devuelve User (clase de userDetails)
        return new User(usuario.getUsername(), usuario.getPassword(), roles);
    }
}


Recorte 011 ProjetConfig.java (adenda... se pone en comentarios el método users()...)
===========

 @Autowired
    private UserDetailsService userDetailsService;

    @Autowired
    public void configurerGlobal(AuthenticationManagerBuilder build) throws Exception {
        build.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());
    }




