Recorte001 Venta.java
==========

package com.tienda.domain;

import jakarta.persistence.*;
import java.io.Serializable;
import lombok.Data;

@Data
@Entity
@Table(name="venta")
public class Venta implements Serializable {    
    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name="id_venta")
    private Long idVenta;
    private Long idFactura;
    private Long idProducto;    
    private double precio;
    private int cantidad;    
    
    public Venta() {
    }

    public Venta(Long idFactura, Long idProducto, double precio, int cantidad) {
        this.idFactura = idFactura;
        this.idProducto = idProducto;
        this.precio = precio;
        this.cantidad = cantidad;
    }
}

Recorte002 Factura.java
==========

package com.tienda.domain;

import jakarta.persistence.*;
import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;
import lombok.Data;

@Data
@Entity
@Table(name="factura")
public class Factura implements Serializable {    
    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name="id_factura")
    private Long idFactura;
    private Long idUsuario;
    private Date fecha;
    private double total;
    private int estado;
    
    
    public Factura() {
    }

    public Factura(Long idUSuario) {
        this.idUsuario = idUSuario;
        this.fecha = Calendar.getInstance().getTime();
        this.estado=1;
    }    
}


Recorte003 FacturaDao.java
==========

package com.tienda.dao;

import com.tienda.domain.Factura;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FacturaDao extends JpaRepository <Factura,Long> {
     
}


Recorte004 VentaDao.java
==========

package com.tienda.dao;

import com.tienda.domain.Venta;
import org.springframework.data.jpa.repository.JpaRepository;

public interface VentaDao extends JpaRepository <Venta,Long> {
     
}


Recorte005 Item.java
==========

package com.tienda.domain;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Data
@EqualsAndHashCode(callSuper=false)
public class Item extends Producto {
    private int cantidad; //Almacenar la cantidad de items de un producto

    public Item() {
    }

    public Item(Producto producto) {
        super.setIdProducto(producto.getIdProducto());
        super.setCategoria(producto.getCategoria());
        super.setDescripcion(producto.getDescripcion());
        super.setDetalle(producto.getDetalle());
        super.setPrecio(producto.getPrecio());
        super.setExistencias(producto.getExistencias());
        super.setActivo(producto.isActivo());
        super.setRutaImagen(producto.getRutaImagen());
        this.cantidad = 0;
    }
}

Recorte006 ItemService.java
==========

package com.tienda.service;

import com.tienda.domain.Item;
import java.util.ArrayList;
import java.util.List;

public interface ItemService {     
    List<Item> listaItems = new ArrayList<>();
    
    public List<Item> gets();
    
    //Se recupera el registro que tiene el idItem pasado por parámetro
    //si no existe en la tabla se retorna null
    public Item get(Item item);
    
    //Se elimina el registro que tiene el idItem pasado por parámetro
    public void delete(Item item);
    
    //Si el objeto item tiene un idItem que existe en la tabla item
    //El registro de actualiza con la nueva información
    //Si el idItem NO existe en la tabla, se crea el registro con esa información
    public void save(Item item);
    
    public void actualiza(Item item);
    
    public void facturar();
}


Recorte006B ItemServiceImpl.java
==========


package com.tienda.service.impl;

import com.tienda.dao.FacturaDao;
import com.tienda.dao.VentaDao;
import com.tienda.domain.Producto;
import com.tienda.domain.Usuario;
import com.tienda.domain.Factura;
import com.tienda.domain.Item;
import com.tienda.domain.Venta;
import com.tienda.service.UsuarioService;
import com.tienda.service.ItemService;
import java.util.List;
import java.util.Objects;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import com.tienda.dao.ProductoDao;

@Service
public class ItemServiceImpl implements ItemService {

    @Override
    public List<Item> gets() {
        return listaItems;
    }

    //Se usa en el addCarrito... agrega un elemento
    @Override
    public void save(Item item) {
        boolean existe = false;
        for (Item i : listaItems) {
            //Busca si ya existe el producto en el carrito
            if (Objects.equals(i.getIdProducto(), item.getIdProducto())) {
                //Valida si aún puede colocar un item adicional -segun existencias-
                if (i.getCantidad() < item.getExistencias()) {
                    //Incrementa en 1 la cantidad de elementos
                    i.setCantidad(i.getCantidad() + 1);
                }
                existe = true;
                break;
            }
        }
        if (!existe) {//Si no está el producto en el carrito se agrega cantidad =1.            
            item.setCantidad(1);
            listaItems.add(item);
        }
    }

    //Se usa para eliminar un producto del carrito
    @Override
    public void delete(Item item) {
        var posicion = -1;
        var existe = false;
        for (Item i : listaItems) {
            ++posicion;
            if (Objects.equals(i.getIdProducto(), item.getIdProducto())) {
                existe = true;
                break;
            }
        }
        if (existe) {
            listaItems.remove(posicion);
        }
    }

    //Se obtiene la información de un producto del carrito... para modificarlo
    @Override
    public Item get(Item item) {
        for (Item i : listaItems) {
            if (Objects.equals(i.getIdProducto(), item.getIdProducto())) {
                return i;
            }
        }
        return null;
    }

    //Se usa en la página para actualizar la cantidad de productos
    @Override
    public void actualiza(Item item) {
        for (Item i : listaItems) {
            if (Objects.equals(i.getIdProducto(), item.getIdProducto())) {
                i.setCantidad(item.getCantidad());
                break;
            }
        }
    }

    @Autowired
    private UsuarioService uuarioService;

    @Autowired
    private FacturaDao facturaDao;
    @Autowired
    private VentaDao ventaDao;
    @Autowired
    private ProductoDao productoDao;

    @Override
    public void facturar() {
        System.out.println("Facturando");

        //Se obtiene el usuario autenticado
        String username;
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        if (principal instanceof UserDetails userDetails) {
            username = userDetails.getUsername();
        } else {
            username = principal.toString();
        }

        if (username.isBlank()) {
            return;
        }

        Usuario uuario = uuarioService.getUsuarioPorUsername(username);

        if (uuario == null) {
            return;
        }

        Factura factura = new Factura(uuario.getIdUsuario());
        factura = facturaDao.save(factura);

        double total = 0;
        for (Item i : listaItems) {
            System.out.println("Producto: " + i.getDescripcion()
                    + " Cantidad: " + i.getCantidad()
                    + " Total: " + i.getPrecio() * i.getCantidad());
            Venta venta = new Venta(factura.getIdFactura(), i.getIdProducto(), i.getPrecio(), i.getCantidad());
            ventaDao.save(venta);
            Producto producto = productoDao.getReferenceById(i.getIdProducto());
            producto.setExistencias(producto.getExistencias()-i.getCantidad());
            productoDao.save(producto);
            total += i.getPrecio() * i.getCantidad();
        }
        factura.setTotal(total);
        facturaDao.save(factura);
        listaItems.clear();
    }
}


Recorte007 CarritoController.java
==========

package com.tienda.controller;

import com.tienda.domain.Producto;
import com.tienda.domain.Item;
import com.tienda.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;
import com.tienda.service.ProductoService;

@Controller
public class CarritoController {
    @Autowired
    private ItemService itemService;
    @Autowired
    private ProductoService productoService;
    
    @GetMapping("/")
    private String listado(Model model) {
        var productos = productoService.getProductos(false);
        model.addAttribute("productos", productos);
        return "/index";
    }

    //Para ver el carrito
    @GetMapping("/carrito/listado")
    public String inicio(Model model) {
        var items = itemService.gets();
        model.addAttribute("items", items);
        var carritoTotalVenta = 0;
        for (Item i : items) {
            carritoTotalVenta += (i.getCantidad() * i.getPrecio());
        }
        model.addAttribute("carritoTotal", 
                carritoTotalVenta);
        return "/carrito/listado";
    }    
   
    //Para Agregar un producto al carrito
    @GetMapping("/carrito/agregar/{idProducto}")
    public ModelAndView agregarItem(Model model, Item item) {
        Item item2 = itemService.get(item);
        if (item2 == null) {
            Producto producto = productoService.getProducto(item);
            item2 = new Item(producto);
        }
        itemService.save(item2);
        var lista = itemService.gets();
        var totalCarritos = 0;
        var carritoTotalVenta = 0;
        for (Item i : lista) {
            totalCarritos += i.getCantidad();
            carritoTotalVenta += (i.getCantidad() * i.getPrecio());
        }
        model.addAttribute("listaItems", lista);
        model.addAttribute("listaTotal", totalCarritos);
        model.addAttribute("carritoTotal", carritoTotalVenta);
        return new ModelAndView("/carrito/fragmentos :: verCarrito");
    }

    //Para mofificar un producto del carrito
    @GetMapping("/carrito/modificar/{idProducto}")
    public String modificarItem(Item item, Model model) {
        item = itemService.get(item);
        model.addAttribute("item", item);
        return "/carrito/modificar";
    }

    //Para eliminar un elemento del carrito
    @GetMapping("/carrito/eliminar/{idProducto}")
    public String eliminarItem(Item item) {
        itemService.delete(item);
        return "redirect:/carrito/listado";
    }

    //Para actualizar un producto del carrito (cantidad)
    @PostMapping("/carrito/guardar")
    public String guardarItem(Item item) {
        itemService.actualiza(item);
        return "redirect:/carrito/listado";
    }

    //Para facturar los productos del carrito... no implementado...
    @GetMapping("/facturar/carrito")
    public String facturarCarrito() {
        itemService.facturar();
        return "redirect:/";
    }
}



Recorte008 carrito\fragmentos.html
==========

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:sec="http://thymeleaf.org/extras/spring-security">
    <head th:replace="~{layout/plantilla :: head}">
        <title>TechShop</title>
    </head>
    <body>
        <section th:fragment="listadoProductos" id="productos">
            <div class="container">
                <div class="row row-cols-2" >
                    <h2 class="inline">[[#{index.nuestrosProductos}]]</h2>
                    <div id="resultsBlock"></div></div>
                <div class="row row-cols-3" 
                     th:if="${productos != null and !productos.empty}">
                    <div class="card" th:each="producto : ${productos}">
                        <div class="card-body">
                            <h5 class="card-title">[[${producto.descripcion}]]</h5>
                            <figure>
                                <img th:src="@{${producto.rutaImagen}}" height="200"/>
                                <figcaption>[[${producto.precio}+' ('+${producto.existencias}+')']]
                                </figcaption>
                            </figure>
                            <form>
                                <input type="hidden" name="texto" th:value="${producto.idProducto}"/>
                                <input type="hidden" name="texto" th:value="${producto.existencias}"/>
                                <button class="btn btn-ligth" id="addCar" 
                                        name="addCar" onclick="addCard(this.form)" 
                                        type="button"><i class="fas fa-cart-plus"></i></button>
                            </form>
                            <p class="card-text">[[${producto.detalle}]]</p>                            
                        </div>
                    </div>
                </div>
                <div th:if="${productos == null or productos.empty}">
                    [[#{carrito.no_mostrar}]]</div>
            </div>
        </section>

        <div th:fragment="verCarrito" th:unless="${#lists.isEmpty(listaItems)}">            
            <form action="/carrito/listado">
                <button
                    type="submit"
                    class="btn btn-primary">
                    <i class="fas fa-cart-plus"></i>
                    [[#{carrito.verCarrito}]] [[${listaTotal}]]
                </button>
            </form>
        </div>     

        <section th:fragment="listadoCarrito" id="items">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="card">
                            <div class="card-header">
                                <h4>[[#{carrito.titulo}]]</h4>
                            </div>
                            <div th:if="${items != null and !items.empty}">
                                <table class="table table-stryped">
                                    <thead class="thead-dark">
                                        <tr>
                                            <th>#</th>
                                            <th>[[#{producto.descripcion}]]</th>
                                            <th>[[#{producto.precio}]]</th>
                                            <th>[[#{carrito.cantidad}]]</th>
                                            <th>[[#{carrito.total}]]</th>
                                            <th></th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr th:each="item, contador : ${items}">
                                            <td>[[${contador.count}]]</td>
                                            <td>[[${item.descripcion}]]</td>
                                            <td class="text-end">[[${item.precio}]]</td>
                                            <td class="text-center">[[${item.cantidad}]]</td>
                                            <td class="text-center">[[${item.cantidad*item.precio}]]</td>
                                            <td>
                                                <a th:href="@{/carrito/eliminar/}+${item.idProducto}"
                                                   class="btn btn-danger">
                                                    <i class='fas fa-trash'></i> [[#{accion.eliminar}]]
                                                </a>
                                            </td>
                                            <td>
                                                <a th:href="@{/carrito/modificar/}+${item.idProducto}"
                                                   class="btn btn-success">
                                                    <i class='fas fa-pencil'></i> [[#{accion.actualizar}]]
                                                </a>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="text-center p-2" th:if="${items== null or items.empty}">
                                [[#{carrito.no_mostrar}]]
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center bg-primary text-white mb-3">
                            <div class="card-body">
                                <h3>[[#{carrito.totalCompra}]]</h3>
                                <h4 class="fs-4">
                                    [[${carritoTotal}]]
                                </h4>
                            </div>
                        </div>
                        <div class="card text-center bg-success text-white mb-3">
                            <div class="card-body">
                                <a th:href="@{/}"
                                   class="btn btn-success">
                                    <i class='fas fa-reply'></i> [[#{carrito.seguirComprando}]]
                                </a>
                            </div>
                        </div>
                        <div class="card text-center bg-info text-white mb-3">
                            <div class="card-body">
                                <a th:href="@{/facturar/carrito}"
                                   class="btn btn-info">
                                    <i class='fas fa-fordward'></i> [[#{carrito.facturar}]]
                                </a>
                            </div>
                        </div> 
                    </div>
                </div>
            </div>
        </section>
    </body>
</html>


Recorte009 carrito\listado.html
==========

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:sec="http://thymeleaf.org/extras/spring-security">
    <head th:replace="~{layout/plantilla :: head}">
        <title>TechShop</title>
    </head>
    <body>
        <header th:replace="~{layout/plantilla :: header}"/>

        <section th:replace="~{carrito/fragmentos :: listadoCarrito}"/>

        <footer th:replace="~{layout/plantilla :: footer}"/>

    </body>
</html>


Recorte010 carrito\modificar.html
==========


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:sec="http://thymeleaf.org/extras/spring-security">
    <head th:replace="~{layout/plantilla :: head}">
        <title>TechShop</title>
    </head>
    <body>
        <header th:replace="~{layout/plantilla :: header}"/>

        <div class="container">
            <div class="row row-cols-6" >
                <a th:href="@{/carrito/listado}" class="btn btn-primary">
                    <i class='fas fa-reply'></i> [[#{accion.regresar}]]</a>
            </div>
            <div class="row row-cols-2">
                <div class="card">
                    <div class="card-header">[[#{carrito.datos}]]</div>
                    <div class="card-body">
                        <h5 class="card-title">[[${item.descripcion}]]</h5>
                        <h6 class="card-subtitle mb-2 text-muted text-end">
                            [[${item.precio}+' ('+${item.existencias}+')']]</h6>
                        <p class="card-text">[[${item.detalle}]]</p>
                    </div>
                </div>
                <div class="card">                    
                    <div class="card-body">
                        <figure><img th:src="@{${item.rutaImagen}}" width="120"/></figure>
                        <form th:action="@{/carrito/guardar}"
                              method="post"
                              th:object="${item}">
                            <input type="hidden" name="idArticulo" th:field="*{idArticulo}"/>
                            <div class="form-group">
                                <label for="cantidad">[[#{carrito.cantidad}]]:</label>
                                <input type="number" name="cantidad" th:field="*{cantidad}" 
                                       min='1' th:max="${item.existencias}"/></div>                
                            <div class="form-group">                    
                                <button class="btn btn-success" type="submit" name="guardar">
                                    <i class='fas fa-save'></i> [[#{accion.guardar}]]</button>
                            </div>
                        </form>
                        <a th:href="@{/carrito/eliminar/}+${item.idArticulo}"
                           class="btn btn-danger">
                            <i class='fas fa-trash'></i> [[#{accion.eliminar}]]
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <footer th:replace="~{layout/plantilla :: footer}"/>

    </body>
</html>


Recorte011 index.html
==========

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns="http://www.w3.org/1999/xhtml">
    <head th:replace="~{layout/plantilla :: head}">
        <title>TechShop</title>        
    </head>
    <body>
        <header th:replace="~{layout/plantilla :: header}"/>
        <section th:replace="~{carrito/fragmentos :: listadoProductos}"/>
        <footer th:replace="~{layout/plantilla :: footer}"/>          
    </body>
</html>
